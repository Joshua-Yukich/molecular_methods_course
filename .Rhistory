ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "blue") +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = "green") +
geom_hline(yintercept = 1597, color = "blue") +
geom_hline(yintercept = 3 * 1597, color = "black") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color="red") +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "red",
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "blue") +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = pal_qual[6]) +
geom_hline(yintercept = 1597, color = pal_qual[1], linetype = "twodashed") +
geom_hline(yintercept = 3 * 1597, color = pal_qual[3], linetype = "dotted") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color="red") +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "red",
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "blue") +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = pal_qual[6]) +
geom_hline(yintercept = 1597, color = pal_qual[1], linetype = "twodashed") +
geom_hline(yintercept = 3 * 1597, color = pal_qual[3], linetype = "dotted") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color="red") +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "red",
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "blue") +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = pal_qual[6]) +
geom_hline(yintercept = 1597, color = pal_qual[1], linetype = "twodash") +
geom_hline(yintercept = 3 * 1597, color = pal_qual[3], linetype = "dotted") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color="red") +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "red",
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = pal_qual[8]) +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = pal_qual[6]) +
geom_hline(yintercept = 1597, color = pal_qual[1], linetype = "twodash") +
geom_hline(yintercept = 3 * 1597, color = pal_qual[3], linetype = "dotted") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color="red") +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = "red",
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0, colour = pal_qual[8]) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = pal_qual[8]) +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = pal_qual[6]) +
geom_hline(yintercept = 1597, color = pal_qual[1], linetype = "twodash") +
geom_hline(yintercept = 3 * 1597, color = pal_qual[3], linetype = "dotted") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color=pal_qual[3]) +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = pal_qual[3],
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
CairoPNG(filename = "GlobaPSA.png", width =6, height = 2, units = "in", dpi = 300)
ggplot(data.df, aes(x = baseline, y=ICER)) + geom_point(alpha = 0.01, stroke = 0, colour = pal_qual[8]) +
#geom_quantile(method='rqss', quantiles=c(0.025, 0.975)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = pal_qual[8]) +
ylim(c(0,5000)) + xlim(c(0,0.6)) + theme_minimal() +
xlab("Baseline Incidence per Person-Year") +
ylab("ICER per DALY Averted") +
geom_hline( yintercept = 1597/2, color = pal_qual[6]) +
geom_hline(yintercept = 1597, color = pal_qual[1], linetype = "twodash") +
geom_hline(yintercept = 3 * 1597, color = pal_qual[3], linetype = "dotted") +
geom_point(aes(x = baseline, y = ICER_sens),alpha = 0.01, stroke = 0, color=pal_qual[3]) +
# geom_quantile(method='rqss', quantiles=c(0.025, 0.975), color="red",
#              inherit.aes = FALSE, aes(x = baseline, y= ICER_sens)) +
geom_quantile(method='rqss', quantiles=c(0.5), colour = pal_qual[3],
inherit.aes = FALSE, aes(x = baseline, y= ICER_sens))
dev.off()
(1/0.03)*(1-exp(-0.03*82))
(1/0.03)*(1-exp(-0.03*86))
(1/0.03)*(1-exp(-0.03*90))
###############################################################################
#                                                                             #
#  Intro to Reproducible use of genetic sequences in R and genetic epi        #
#                                                                             #
#   Script developed to highlight reproducible research methods               #
#     and to highlight use of tools related to sequencing and                 #
#     use and interpretation of genetic sequence data in the R                #
#     programming language and environment.                                   #
#                                                                             #
#    Written in R version 4.0.2 using R Studio 1.3.1073                       #
#                                                                             #
#  Dependencies: tidyverse, bioconductor, seqinr, outbreaker2, rprojroot,     #
#               seqinr, ape, phangorn, DECIPHER, adephylo, adegenet           #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################
# installation of required packages (Commented) ----
#BiocManager::install(version = "3.11")
#install.packages('seqinr')
#install.packages('outbreaker2')
#install.packages('rprojroot')
#install.packages('tidyverse')
#install.packages('ape')
#install.packages('phangorn')
#BiocManager::install('DECIPHER')
#install.packages('adephylo')
#install.packages('adegenet')
# loading required libraries ----
library(rprojroot)
library(rstudioapi)
library(tidyverse)
library(seqinr)
library(outbreaker2)
library(ape)
library(phangorn)
library(adephylo)
library(adegenet)
library(DECIPHER)
# session info -----
run_date <- date()
run_date
sessionInfo()
# setting working directory and other user preferences -----
if (interactive()) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
base_path <- find_root('base_environment.R')
setwd(base_path)
source('base_environment.R')
# preserve graphics settings ----
par_old <- par()
# load sequence data (in FASTA format)
fas <- "./R_example/sequences_from_session_1.fna"
dna <- readDNAStringSet(fas)
dna # the unaligned sequences
###############################################################################
#                                                                             #
#  Intro to Reproducible use of genetic sequences in R and genetic epi        #
#                                                                             #
#   Script developed to highlight reproducible research methods               #
#     and to highlight use of tools related to sequencing and                 #
#     use and interpretation of genetic sequence data in the R                #
#     programming language and environment.                                   #
#                                                                             #
#    Written in R version 4.0.2 using R Studio 1.3.1073                       #
#                                                                             #
#  Dependencies: tidyverse, bioconductor, seqinr, outbreaker2, rprojroot,     #
#               seqinr, ape, phangorn, DECIPHER, adephylo, adegenet           #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################
# installation of required packages (Commented) ----
#BiocManager::install(version = "3.11")
#install.packages('seqinr')
#install.packages('outbreaker2')
#install.packages('rprojroot')
#install.packages('tidyverse')
#install.packages('ape')
#install.packages('phangorn')
#BiocManager::install('DECIPHER')
#install.packages('adephylo')
#install.packages('adegenet')
# loading required libraries ----
library(rprojroot)
library(rstudioapi)
library(tidyverse)
library(seqinr)
library(outbreaker2)
library(ape)
library(phangorn)
library(adephylo)
library(adegenet)
library(DECIPHER)
# session info -----
run_date <- date()
run_date
sessionInfo()
# setting working directory and other user preferences -----
if (interactive()) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
base_path <- find_root('base_environment.R')
setwd(base_path)
source('base_environment.R')
# preserve graphics settings ----
par_old <- par()
# load sequence data (in FASTA format)
fas <- "./R_example/sequences_from_session_1.fna"
dna <- readDNAStringSet(fas)
dna # the unaligned sequences
if (interactive()) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
base_path <- find_root('base_environment.R')
setwd(base_path)
source('base_environment.R')
par_old <- par()
# load sequence data (in FASTA format)
fas <- "./R_example/sequences_from_session_1.fna"
dna <- readDNAStringSet(fas)
dna # the unaligned sequences
DNA <- AlignSeqs(dna)
DNA
# write alignments to file.
writeXStringSet(DNA, file="./R_example/sequences_from_session_1_aligned.fna")
# reload from file (not necessary but worth checking that write worked)
seqs <- read.dna("./R_example/sequences_from_session_1_aligned.fna", format="fasta")
seqs
#create a phyDat object
virus_phyDat <- phyDat(seqs, type = "DNA", levels = NULL)
help("phyDat")
modelTest(virus_phyDat, model = c("JC", "F81"))
#create a phyDat object
virus_phyDat <- phyDat(seqs, type = "DNA", levels = NULL)
# test a vareity of nucleotide substitution models
mt <- modelTest(virus_phyDat, model = c("JC", "F81"))
print(mt)
modelTest(virus_phyDat, model = c("JC", "F81"))
DNA <- AlignSeqs(dna)
DNA
# write alignments to file.
writeXStringSet(DNA, file="./R_example/sequences_from_session_1_aligned.fna")
# reload from file (not necessary but worth checking that write worked)
seqs <- read.dna("./R_example/sequences_from_session_1_aligned.fna", format="fasta")
seqs
#create a phyDat object
virus_phyDat <- phyDat(seqs, type = "DNA", levels = NULL)
# test a vareity of nucleotide substitution models
mt <- modelTest(virus_phyDat, model = c("JC", "F81"))
print(mt)
###############################################################################
#                                                                             #
#  Intro to Reproducible use of genetic sequences in R and genetic epi        #
#                                                                             #
#   Script developed to highlight reproducible research methods               #
#     and to highlight use of tools related to sequencing and                 #
#     use and interpretation of genetic sequence data in the R                #
#     programming language and environment.                                   #
#                                                                             #
#    Written in R version 4.0.2 using R Studio 1.3.1073                       #
#                                                                             #
#  Dependencies: tidyverse, bioconductor, seqinr, outbreaker2, rprojroot,     #
#               seqinr, ape, phangorn, DECIPHER, adephylo, adegenet           #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################
# installation of required packages (Commented) ----
#BiocManager::install(version = "3.11")
#install.packages('seqinr')
#install.packages('outbreaker2')
#install.packages('rprojroot')
#install.packages('tidyverse')
#install.packages('ape')
#install.packages('phangorn')
#BiocManager::install('DECIPHER')
#install.packages('adephylo')
#install.packages('adegenet')
# loading required libraries ----
library(rprojroot)
library(rstudioapi)
library(tidyverse)
library(seqinr)
library(outbreaker2)
library(ape)
library(phangorn)
library(adephylo)
library(adegenet)
library(DECIPHER)
# session info -----
run_date <- date()
run_date
sessionInfo()
# setting working directory and other user preferences -----
if (interactive()) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
base_path <- find_root('base_environment.R')
setwd(base_path)
source('base_environment.R')
# preserve graphics settings ----
par_old <- par()
# load sequence data (in FASTA format)
fas <- "./R_example/sequences_from_session_1.fna"
dna <- readDNAStringSet(fas)
dna # the unaligned sequences
#
DNA <- AlignSeqs(dna)
DNA
# write alignments to file.
writeXStringSet(DNA, file="./R_example/sequences_from_session_1_aligned.fna")
# reload from file (not necessary but worth checking that write worked)
seqs <- read.dna("./R_example/sequences_from_session_1_aligned.fna", format="fasta")
seqs
#create a phyDat object
virus_phyDat <- phyDat(seqs, type = "DNA", levels = NULL)
mt <- modelTest(virus_phyDat, model = c("JC", "F81"))
print(mt)
remotes::install_github("KlausVigo/phangorn")
help(Rtools)
help('Rtools')
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
remotes::install_github("KlausVigo/phangorn")
remotes::install_github("KlausVigo/phangorn")
help(remotes)
help('remotes')
install.packages("Rtools")
install_github("KlausVigo/phangorn")
library(RTools)
library(Rtools)
install.packages("remotes")
install.packages("remotes")
install_github("KlausVigo/phangorn")
remotes::install_github("KlausVigo/phangorn")
devtools::install_github("KlausVigo/phangorn")
GITHUB_PAT
Rsys.env("GITHUB_PAT")
###############################################################################
#                                                                             #
#  Intro to Reproducible use of genetic sequences in R and genetic epi        #
#                                                                             #
#   Script developed to highlight reproducible research methods               #
#     and to highlight use of tools related to sequencing and                 #
#     use and interpretation of genetic sequence data in the R                #
#     programming language and environment.                                   #
#                                                                             #
#    Written in R version 4.0.2 using R Studio 1.3.1073                       #
#                                                                             #
#  Dependencies: tidyverse, bioconductor, seqinr, outbreaker2, rprojroot,     #
#               seqinr, ape, phangorn, DECIPHER, adephylo, adegenet           #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################
# installation of required packages (Commented) ----
#BiocManager::install(version = "3.11")
#install.packages('seqinr')
#install.packages('outbreaker2')
#install.packages('rprojroot')
#install.packages('tidyverse')
#install.packages('ape')
#install.packages('phangorn')
#BiocManager::install('DECIPHER')
#install.packages('adephylo')
#install.packages('adegenet')
# loading required libraries ----
library(rprojroot)
library(rstudioapi)
library(tidyverse)
library(seqinr)
library(outbreaker2)
library(ape)
library(phangorn)
library(adephylo)
library(adegenet)
library(DECIPHER)
# session info -----
run_date <- date()
run_date
sessionInfo()
# setting working directory and other user preferences -----
if (interactive()) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
base_path <- find_root('base_environment.R')
setwd(base_path)
source('base_environment.R')
# preserve graphics settings ----
par_old <- par()
fas <- "./R_example/sequences_from_session_1.fna"
dna <- readDNAStringSet(fas)
dna
DNA <- AlignSeqs(dna)
DNA
# write alignments to file.
writeXStringSet(DNA, file="./R_example/sequences_from_session_1_aligned.fna")
help("AlignSeqs")
# reload from file (not necessary but worth checking that write worked)
seqs <- read.dna("./R_example/sequences_from_session_1_aligned.fna", format="fasta")
seqs
#create a phyDat object
virus_phyDat <- phyDat(seqs, type = "DNA", levels = NULL)
View(virus_phyDat)
mt <- modelTest(virus_phyDat, model = c("JC", "F81"))
help(modelTest)
tree <- NJ(dist.ml(virus_phyDat, "LG"))
tree <- NJ(dist.ml(virus_phyDat, "JC"))
tree
print(tree)
modelTest(virus_phyDat, tree = tree, model = c("JC", "F81"))
mt <- modelTest(virus_phyDat, tree = tree, model = c("JC", "F81"))
print(mt)
# choose a model and create a distance matrix
dna_dist <- dist.ml(virus_phyDat, model="JC69")
dna_dist
virus_UPGMA <- upgma(dna_dist)
virus_NJ <- NJ(dna_dist)
plot(virus_UPGMA, main="UPGMA")
library(Cairo)
CairoPDF(file = "test.pdf")
plot(virus_UPGMA, main="UPGMA")
dev.off()
plot(virus_NJ, main = "Neighbor Joining")
plot(virus_NJ, main = "Neighbor Joining")
plot(virus_NJ, type = "unrooted", cex = 0.5)
plot(virus_NJ, type = "cladogram")
plot(virus_NJ, type = "fan")
plot(virus_NJ, type = "radial")
bullseye(virus_NJ, font = 2, cex = 0.5)
long_seqs <- readDNAStringSet(file.path(getwd(), "R_example", "plastid_genomes.fa"))
long_seqs
Seqs2DB(long_seqs, "XStringSet", "long_db", names(long_seqs))
synteny <- FindSynteny("long_db")
pairs(synteny)
plot(synteny)
alignment <- AlignSynteny(synteny, "long_db")
#
blocks <- unlist(alignment[[1]])
View(blocks)
blocks
writeXStringSet(blocks, "genome_blocks_out.fa")
# outbreaker2 demo ----
# restore graphics settings
par(par_old)
fake_outbreak
str(fake_outbreak)
fake_outbreak
plot(fake_outbreak$w, type = "h", xlim = c(0, 5),
lwd = 30, col = "red", lend = 2,
xlab = "Days after infection",
ylab = "p(new case)",
main = "Generation time distribution")
args(outbreaker)
dna <- fake_outbreak$dna
dates <- fake_outbreak$sample
ctd <- fake_outbreak$ctd
w <- fake_outbreak$w
write.dna(dna, "outbreaker_unaligned.fasta", format = "fasta")
fas <- "outbreaker_unaligned.fasta"
dna_2 <- readDNAStringSet(fas)
dna_2 # the unaligned sequences
DNA <- AlignSeqs(dna_2)
DNA
writeXStringSet(DNA, file="./R_example/outbreaker_aligned.fna")
seqs <- read.dna("./R_example/outbreaker_aligned.fna", format="fasta")
seqs
outbreaker_phyDat <- phyDat(seqs, type = "DNA", levels = NULL)
mt <- modelTest(outbreaker_phyDat, model = c("JC", "F81"))
print(mt)
tree <- NJ(dist.ml(outbreaker_phyDat, "JC"))
mt <- modelTest(outbreaker_phyDat, tree= tree, model = c("JC", "F81"))
print(mt)
# choose a model and create a distance matrix
dna_dist <- dist.ml(outbreaker_phyDat, model="F81")
dna_dist
# contruct tree from matix
outbreaker_UPGMA<- upgma(dna_dist)
plot(outbreaker_UPGMA, main="UPGMA", "unrooted")
plot(outbreaker_UPGMA, main="UPGMA")
bullseye(outbreaker_UPGMA, font = 2, tip.color = any2col(dates, col.pal=seasun)$col)
data <- outbreaker_data(dna = dna, dates = dates, ctd = ctd, w_dens = w)
set.seed(1)
res <- outbreaker(data = data)
class(res)
dim(res)
names(res)
plot(res)
plot(res, "mu")
plot(res, "mu", "density", burnin = 2000)
plot(res, type = "alpha", burnin = 2000)
plot(res, type = "t_inf", burnin = 2000)
plot(res, type = "kappa", burnin = 2000)
plot(res, type = "network", burnin = 2000, min_support = 0.01)
