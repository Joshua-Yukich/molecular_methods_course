geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),
alpha = 0.5) +
# add some text annotations for the very large countries
geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),
color = "grey50",
data = filter(gapminder_2007, pop > 1000000000 | country %in% c("Nigeria", "United States"))) +
# clean the axes names and breaks
scale_x_log10(limits = c(200, 60000)) +
# change labels
labs(title = "GDP versus life expectancy in 2007",
x = "GDP per capita (log scale)",
y = "Life expectancy",
size = "Popoulation",
color = "Continent") +
# change the size scale
scale_size(range = c(0.1, 10),
# remove size legend
guide = "none") +
# add a nicer theme
theme_classic() +
# place legend at top and grey axis lines
theme(legend.position = "top",
axis.line = element_line(color = "grey85"),
axis.ticks = element_line(color = "grey85"))
# save the plot
ggsave("beautiful_plot.png", p, dpi = 300, width = 6, height = 4)
help(ggsave)
# save the plot
ggplot2::ggsave("beautiful_plot.png", p, dpi = 300, width = 6, height = 4)
# save the plot
ggplot2::ggsave("beautiful_plot.png", p, dpi = 300, width = 6, height = 4)
locus <- "Basilica di San Marco, Venezia, Italy"
myMap <- get_map(location=locus, zoom= 18, source="google",
maptype="roadmap", crop=TRUE)
ggmap(myMap)
myMap <- get_map(location=locus, zoom= 18,
source="google", maptype="satellite", crop=TRUE)
ggmap(myMap)
myMap <- get_map(location=locus, zoom= 19,
source="google", maptype="hybrid", crop=TRUE)
ggmap(myMap)
#myMap <- get_map(location=locus, zoom= 15,
#                 source="stadia", maptype="stamen_watercolor", crop=TRUE)
#ggmap(myMap)
myMap <- get_map(location=locus, zoom= 15,
source="stadia", maptype="stamen_toner", crop=TRUE)
ggmap(myMap)
addresses <- c("3627 1st St New Orleans LA 70125", "1428 Chartres St New Orleans LA 70116")
data_df <- data.frame(address = addresses)
data_df <- cbind(data_df, geocode(addresses, source = "google"))
locus <- "New Orleans"
myMap <- get_map(location=locus, zoom= 14,
source="stadia", maptype = "outdoors", crop=TRUE)
ggmap(myMap) + geom_point(data = data_df, aes( x = lon, y = lat))
#incidents <- read.csv('https://raw.githubusercontent.com/lgellis/MiscTutorial/master/ggmap#/i2Sample.csv', stringsAsFactors = FALSE)
#write_csv(incidents, path = "C:/Users/jyukich/Documents/sphu4160/fall_2019/class_lib_R/incidents.csv" )
incidents <- read_csv("C:/Users/jyukich/Documents/sphu4160/fall_2019/class_lib_R/incidents.csv")
dim(incidents)
head(incidents)
col1 <- "#CC0000"
#add year to the incidents data frame
incidents$ymd <- mdy_hms(incidents$Event.Clearance.Date)
incidents$year <- year(incidents$ymd)
#Create a more manageable data frame with only 2017 and 2018 data
i2 <- incidents %>%
filter(year>=2017 & year<=2018)
#Only include complete cases
i2[complete.cases(i2), ]
p <- get_map(location =  c(lon = -122.335167, lat = 47.608013),
zoom = 14, scale = 2,
maptype ='satellite',
color = 'color')
p <- ggmap(p)
p + geom_point(aes(x = Longitude, y = Latitude), alpha=0.3, size = 0.5, colour = col1, data = i2) + theme(legend.position="none")
pa<-ggplot(schz, aes(year, month, fill = SczBroad)) +
geom_tile(colour="gray20", size=1.5, stat="identity") +
scale_fill_viridis(option="A") +
scale_y_continuous(breaks=1:12, labels=month.abb[1:12])+
xlab("") +
ylab("") +
ggtitle("Total Australian Schizophrenics Born By Month and Year") +
theme(
plot.title = element_text(color="white",hjust=0,vjust=1, size=rel(2)),
plot.background = element_rect(fill="gray20"),
panel.background = element_rect(fill="gray20"),
panel.border = element_rect(fill=NA,color="gray20", size=0.5, linetype="solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(color="white", size=rel(1.5)),
axis.text.y  = element_text(hjust=1),
legend.text = element_text(color="white", size=rel(1.3)),
legend.background = element_rect(fill="gray20"),
legend.position = "bottom",
legend.title=element_blank()
)
pa<-ggplot(schz, aes(year, month, fill = SczBroad)) +
geom_tile(colour="gray20", size=1.5, stat="identity") +
scale_fill_viridis(option="A") +
scale_y_continuous(breaks=1:12, labels=month.abb[1:12])+
xlab("") +
ylab("") +
ggtitle("Total Australian Schizophrenics Born By Month and Year") +
theme(
plot.title = element_text(color="white",hjust=0,vjust=1, size=rel(2)),
plot.background = element_rect(fill="gray20"),
panel.background = element_rect(fill="gray20"),
panel.border = element_rect(fill=NA,color="gray20", size=0.5, linetype="solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(color="white", size=rel(1.5)),
axis.text.y  = element_text(hjust=1),
legend.text = element_text(color="white", size=rel(1.3)),
legend.background = element_rect(fill="gray20"),
legend.position = "bottom",
legend.title=element_blank()
)
data.frame( size = c(rep("big", 100), rep("small", 150))
data_df <- data.frame( size = c(rep("big", 100), rep("small", 150))
ggplot(data_df, aes(x = size)) + geom_histogram()
data_df <- data.frame( size = c(rep("big", 100), rep("small", 150))
pa<-ggplot(schz, aes(year, month, fill = SczBroad)) +
data_df <- data.frame( size = c(rep("big", 100), rep("small", 150))
data_df <- data.frame( size = c(rep("big", 100), rep("small", 150)))
data_df <- data.frame( size = c(rep("big", 100), rep("small", 150)))
ggplot(data_df, aes(x = size)) + geom_histogram()
ggplot(data_df, aes(x = size)) + geom_bar()
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(99, 151)
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(80, 160)
ggplot(data_df, aes(x = size)) + geom_bar()
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(80, 160)
ggplot(data_df, aes(x = size)) + geom_bar()
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(10, 200)
ggplot(data_df, aes(x = size)) + geom_histogram()
ggplot(data_df, aes(x = size)) + geom_histogram(stat = count)
ggplot(data_df, aes(x = size)) + geom_histogram(stat = "count")
ggplot(data_df, aes(x = size)) + geom_histogram(stat = "count") + ylim(c(99,151))
ggplot(data_df, aes(x = size)) + geom_bar()
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(100)
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(c(99,151))
ggplot(data_df, aes(x = size)) + geom_bar() + xlim(c(99,151))
ggplot(data_df, aes(x = size)) + geom_bar() + lim(c(99,151))
ggplot(data_df, aes(x = size)) + geom_bar() + ylim(c(99,151))
library(scales)
ggplot(data_df, aes(x = size)) + geom_bar() +
+ scale_y_continuous(limits=c(99,151),oob = rescale_none)
ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(99,151),oob = rescale_none)
p1 <- ggplot(data_df, aes(x = size)) + geom_bar()
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(99,151),oob = rescale_none)
ggarrange(p1, p2)
p1 <- ggplot(data_df, aes(x = size)) + geom_bar()
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(99,151),oob = rescale_none)
ggarrange(p1, p2)
help(ggarrange)
library(ggpubr)
ggarrange(p1, p2)
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(100,150),oob = rescale_none)
ggarrange(p1, p2)
ggarrange(p1, p2) + theme_minimal()
ggarrange(p1, p2) + theme_void()
p1 <- ggplot(data_df, aes(x = size)) + geom_bar() + theme_minimal()
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(100,150),oob = rescale_none) + theme_minimal()
ggarrange(p1, p2) + theme_void()
p1 <- ggplot(data_df, aes(x = size)) + geom_bar() + theme_void()
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(100,150),oob = rescale_none) + theme_void()
ggarrange(p1, p2) + theme_void()
p1 <- ggplot(data_df, aes(x = size)) + geom_bar() + theme_minimal()
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(100,150),oob = rescale_none) + theme_minimal()
ggarrange(p1, p2) + theme_void()
ggsave("lie_factor.png")
p3 <- ggarrange(p1, p2) + theme_void()
ggsave("lie_factor.png", p3)
rlang::last_trace()
help(ggsvae)
help(ggsave)
ggplot2::ggsave("lie_factor.png", p3)
help(package = "dichromat")
pal <- function(col, ...)
image(seq_along(col), 1, matrix(seq_along(col), ncol = 1),
col = col, axes = FALSE, ...)
opar <- par(mar = c(1, 2, 1, 1))
layout(matrix(1:6, ncol = 1))
pal(colorschemes$BrowntoBlue.10, main = "Brown to Blue (10)")
pal(colorRampPalette(colorschemes$BrowntoBlue.10, space = "Lab")(100),
main = "Brown to Blue Ramp")
pal(dichromat(colorschemes$BrowntoBlue.10),
main = "Brown to Blue (10) -- deuteranopia")
pal(colorschemes$Categorical.12, main = "Categorical (12)")
pal(dichromat(colorschemes$Categorical.12),
main = "Categorical (12) -- deuteranopia")
pal(dichromat(colorschemes$Categorical.12, "protan"),
main = "Categorical (12) -- protanopia")
par(opar)
help(package = 'viridis')
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
par(opar)
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
par
par()
par(mar = c(0, 0, 0, 0))
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
ggplot(choropleth, aes(long, lat, group = group)) +
geom_polygon(aes(fill = rate), colour = alpha("white", 1 / 2), linewidth = 0.2) +
geom_polygon(data = state_df, colour = "white", fill = NA) +
coord_fixed() +
theme_minimal() +
ggtitle("US unemployment rate by county") +
theme(axis.line = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank()) +
scale_fill_viridis(option="magma")
data_df <- data.frame( size = c(rep("big", 100), rep("small", 150)))
p1 <- ggplot(data_df, aes(x = size)) + geom_bar() + theme_minimal()
p2 <- ggplot(data_df, aes(x = size)) + geom_bar() +
scale_y_continuous(limits=c(100,150),oob = rescale_none) + theme_minimal()
p3 <- ggarrange(p1, p2) + theme_void()
ggplot2::ggsave("lie_factor.png", p3)
pa<-ggplot(schz, aes(year, month, fill = SczBroad)) +
geom_tile(colour="gray20", size=1.5, stat="identity") +
scale_fill_viridis(option="A") +
scale_y_continuous(breaks=1:12, labels=month.abb[1:12])+
xlab("") +
ylab("") +
ggtitle("Total Australian Schizophrenics Born By Month and Year") +
theme(
plot.title = element_text(color="white",hjust=0,vjust=1, size=rel(2)),
plot.background = element_rect(fill="gray20"),
panel.background = element_rect(fill="gray20"),
panel.border = element_rect(fill=NA,color="gray20", size=0.5, linetype="solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(color="white", size=rel(1.5)),
axis.text.y  = element_text(hjust=1),
legend.text = element_text(color="white", size=rel(1.3)),
legend.background = element_rect(fill="gray20"),
legend.position = "bottom",
legend.title=element_blank()
)
pa
pa
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
library(viridis)
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=viridis,
asp=1)
data_df <- data.frame(prop = c(0.25, 0.75))
ggplot(data_df, aes(x = prop)) + geom_bar(position = "stack") +
+ coord_polar() + theme_minimal()
library(ggplot2)
ggplot(data_df, aes(x = prop)) + geom_bar(position = "stack") +
+ coord_polar() + theme_minimal()
ggplot(data_df, aes(x = prop)) + geom_bar(position = "stack") +
coord_polar() + theme_minimal()
data_df <- data.frame(prop = c(25, 75))
ggplot(data_df, aes(x = prop)) + geom_bar(position = "stack") +
coord_polar() + theme_minimal()
data_df <- data.frame(prop = c(25, 75),
type = c("A", "B"))
ggplot(data_df, aes(x = prop, fill = "type")) + geom_bar(position = "stack") +
coord_polar() + theme_minimal()
View(data_df)
ggplot(data_df, aes(y = prop, fill = "type")) + geom_bar(position = "stack") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(y = prop, color = "type")) + geom_bar(position = "stack") +
coord_polar("y") + theme_minimal()
data_df <- data.frame(size = c(rep("big", 25), rep("small", 75)))
ggplot(data_df, aes(y = size, fill = size)) + geom_bar(position = "stack") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(y = size, fill = size)) + geom_bar(position = "stack") +
coord_polar("x") + theme_minimal()
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "stack") +
coord_polar("x") + theme_minimal()
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "stack") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "stack")
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "fill")
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "stack")
help(geom_bar)
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "stack")
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "dodge")
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "full")
p1 <- ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "fill") +
coord_polar("y") + theme_minimal()
p1 <-
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "fill") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(x = "" y = size, fill = size)) + geom_bar(position = "fill")
ggplot(data_df, aes(x = "", y = size, fill = size)) + geom_bar(position = "stack")
p1 <-
ggplot(data_df, aes(y = size, fill = size)) + geom_bar(position = "stack") +
coord_polar("y") + theme_minimal()
p1 <-
ggplot(data_df, aes(y = size, fill = size)) + geom_col(position = "stack") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(y = size, fill = size)) + geom_col(position = "stack") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(x = "", y = size, fill = size)) + geom_col(position = "stack") +
coord_polar("y") + theme_minimal()
ggplot(data_df, aes(x = "", y = size, fill = size)) + geom_col(position = "stack")
ggplot(data_df, aes(x = "", y = size, fill = size)) + geom_bar(position = "stack")
ggplot(data_df, aes(y = size, fill = size)) + geom_bar(position = "stack")
ggplot(data_df, aes(x = size, fill = size)) + geom_bar(position = "stack")
#p1 <-
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1)
data_df <- data.frame(count = c(25, 75),
size = ("big", "small"))
#p1 <-
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1)
data_df <- data.frame(count = c(25, 75),
size = c("big", "small"))
#p1 <-
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1)
#p1 <-
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) = coord_polar(theta = "y")
#p1 <-
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y")
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y", start = 15)
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y", start = 5)
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y", start = -5)
p1 <- ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y") +theme_void()
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y") +theme_void()
ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y", start = -5) + theme_void()
data_df <- data.frame(count = c(25, 75),
size = c("big", "small"))
p1 <- ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y") +theme_void()
p2 <- ggplot(data_df, aes(x = factor(1), y = count, fill = as.factor(size))) +
geom_bar(stat = "identity", width = 1) + coord_polar(theta = "y", start = -5) + theme_void()
p3 <- ggarrange(p1, p2) + theme_void()
ggplot2::ggsave("bad_pie.png", p3)
library(ggpubr)
ggplot2::ggsave("bad_pie.png", p3)
p3 <- ggarrange(p1, p2) + theme_void()
ggplot2::ggsave("bad_pie.png", p3)
help("ggplot")
ggplot() +
geom_point(mapping = aes(x = group, y = value), data = sample_df) +
geom_point(
mapping = aes(x = group, y = group_mean), data = group_means_df,
colour = 'red', size = 3
)
v <- ggplot(faithfuld, aes(waiting, eruptions, z = density))
v + geom_contour()
ggplot(faithful, aes(waiting, eruptions)) +
geom_density_2d()
v + geom_contour_filled()
pal(v + geom_contour_filled())
warnings()
virids
virids()
library(viridis)
virids()
dichromat()
library(dichromat)
dichromat()
dichromat
v + geom_contour_filled() + scale_fill_manual(dichromat(scale_fill_discrete()))
v + geom_contour_filled() + scale_fill_manual(dichromat(scale_fill_discrete(), type = "deutan"))
scale_fill_discrete()
v + geom_contour_filled() + scale_fill_discrete(palette = "virids")
v + geom_contour_filled() + scale_fill_discrete(pal = "virids")
v + geom_contour_filled()
v + geom_contour_manual(pal = camre_pal)
library(camrePalettes)
v + geom_contour_filled(pal = camre_pal)
v + geom_contour_filled(pallete = camre_pal)
v + geom_contour_filled(palette = camre_pal)
#----------------------------------------------------------------------------#
#                                                                            #
#  Session 20 Script: intro to ggplot                                        #
#   program                                                                  #
#    J. Yukich novembner 23rd 2019  jyukich@tulane.edu                       #
#                                                                            #
#    This script is a demonstration of the basic principles of               #
#    principles of making graphics in R using ggplot                         #
#         Original exercise derived from rebecca barter                      #
#       http://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial/       #
#       and laura ellis https://www.littlemissdata.com/about                 #
#    It requires the use ggplot2, tidyverse, Hmisc, ggmap, and lubridate     #
#                                                                            #
#    It was developed in R 3.5.3.                                            #
#----------------------------------------------------------------------------#
# loading required libraries ----
library(ggplot2)
library(tidyverse)
library(Hmisc)
library(ggmap)
library(lubridate)
library(camrePalettes)
library(dichromat)
library(rprojroot)
#set any other options ----
# setting working directory and other user preferences -----
if (interactive()) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
base_path <- find_root('base_environment.R')
setwd(base_path)
source('./base_environment.R')
# print and get runtime ----
date()
# session info ----
sessionInfo()
gapminder <- read_csv(paste0(base_path, "/genomic_data_visulization/gapminder.csv"))
head(gapminder)
describe(gapminder)
plot(describe(gapminder))
help("ggplot")
parent.frame()
aes()
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
# describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
# add a points layer on top
geom_point()
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.5, col = "cornflowerblue", size = 0.5)
unique(gapminder$continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = 0.5, size = 0.5)
unique(gapminder$continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.5, size = 0.5, aes(color = continent))
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5)
ggplot(gapminder, aes(x = year, y = lifeExp, color = continent)) +
geom_line(alpha = 0.5)
ggplot(gapminder, aes(x = year, y = lifeExp, group = country, color = continent)) +
geom_line(alpha = 0.5)
ggplot(gapminder, aes(x = continent, y = lifeExp, fill = continent)) +
geom_boxplot()
ggplot(gapminder, aes(x = lifeExp)) +
geom_histogram(binwidth = 3)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point(aes(color = continent), alpha = 0.5) +
geom_smooth(se = FALSE, method = "loess", color = "grey30")
gapminder %>% filter(year == 2005) %>%
ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5)
gapminder %>% filter(year == 2000) %>%
ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5)
gapminder %>% filter(year == 1997) %>%
ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5)
ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5) + facet_wrap(~year)
gapminder %>% filter(year == 1997) %>%
#ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
#  geom_point(alpha = 0.5)
ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5) + facet_wrap(~year)
gapminder %>% #filter(year == 1997) %>%
#ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
#  geom_point(alpha = 0.5)
ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.5) + facet_wrap(~year)
